use crate::parser::cst;

grammar;

pub Statement: cst::Statement = {
	Select => cst::Statement::Select(<>),
}

Select: cst::Select = {
	"select" <exprs:SelectExprs> <from:("from" <TableExpr>)?> => cst::Select { exprs, from },
};

CommaList<T>: Vec<T> = {
	<v:(<T> ",")*> <last:T> => {
		let mut v = v;
		v.push(last);
		v
	},
};

SelectExprs = CommaList<SelectExpr>;

SelectExpr: cst::SelectExpr = {
	Expr => cst::SelectExpr{ expr: <>, alias: None },
};

Expr: cst::Expr = {
	ColumnName => cst::Expr::Column(<>),
};

ColumnName: cst::ColumnName = <s:r"[[:alpha:]]+"> => cst::ColumnName::from(s);

TableExpr: cst::TableExpr = {
	TableName => cst::TableExpr::Table(<>),
};

TableName: cst::TableName = <s:r"[[:alpha:]]+"> => cst::TableName::from(s);
