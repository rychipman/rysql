use crate::parser::cst;

grammar;

pub Statement: cst::Statement = {
	Select => cst::Statement::Select(<>),
}

Select: cst::Select = {
	"select" <exprs:SelectExprs> <from:("from" <TableExpr>)?> <filter:("where" <Expr>)?> => cst::Select { exprs, from, filter },
};

CommaList<T>: Vec<T> = {
	<v:(<T> ",")*> <last:T> => {
		let mut v = v;
		v.push(last);
		v
	},
};

SelectExprs = CommaList<SelectExpr>;

AliasedSelectExpr: cst::AliasedSelectExpr = {
	<expr:Expr> <alias:("as"? <ColumnName>)?> => cst::AliasedSelectExpr{expr, alias},
};

SelectExpr: cst::SelectExpr = {
	AliasedSelectExpr => cst::SelectExpr::Aliased(<>),
	"*" => cst::SelectExpr::Star,
};

Expr: cst::Expr = {
	ColumnName => cst::Expr::Column(<>),
};

ColumnName: cst::ColumnName = Ident => cst::ColumnName::from(<>);

TableExpr: cst::TableExpr = {
	TableName => cst::TableExpr::Table(<>),
	Join => cst::TableExpr::Join(<>),
	"(" <Select> ")" => cst::TableExpr::Subquery(Box::new(<>)),
};

TableName: cst::TableName = Ident => cst::TableName::from(<>);

Join: cst::Join = {
	<left:TableExpr> "join" <right:TableName> <filter:("on" <Expr>)?> => cst::Join{left: Box::new(left), right, filter},
}

Ident: String = <s:r"[[:alpha:]]+"> => String::from(s);
